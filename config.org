#+TITLE: Emacs Configuration
#+AUTHOR: George Castillo

Every so often, I try to take some time to organize my Emacs
configuration and been more or less met with mixed results.  I
recently ran across the idea of using org-mode to organize virtually
all of it, and I thought that was a fantastic idea.  I use org-mode
for managing nearly everything else as it is, so it makes total sense
to use it for keeping my Emacs configuration from getting out of
control.

* Customize Settings

Set up a file for custom settings instead of saving customize settings in
[[file:init.el][init.el]].  This seems to happen inadvertantly, so putting it somewhere else is a
good idea.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(if (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* Appearance

Turn off a lot of the default stuff that just occupies screen real
estate.
#+BEGIN_SRC emacs-lisp
(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (fringe-mode -1))

;; the menu-bar-mode should remian off unless we happen to be on Mac OS - the
;; blank menu at the top of the screen it creates just looks weird to me.
(if (and window-system (string-equal system-type "darwin"))
 (menu-bar-mode nil))

(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)

;; elisp scratch buffers should be empty
(setq initial-scratch-message "")
#+END_SRC

** Theme
*** Solarized Theme
I have been using [[http://ethanschoonover.com/solarized][Solarized themes]] for as long as I can remember.  It has
both light and dark variants and eye fatigue has never been a problem
for me.
#+BEGIN_SRC emacs-lisp
;; for some reason, if color-theme is not explicitly installed first, this breaks.
(use-package color-theme :ensure t)

;; https://github.com/sellout/emacs-color-theme-solarized/pull/187
(use-package color-theme-solarized
  :ensure t
  :init
  (customize-set-variable 'frame-background-mode 'dark)
  (load-theme 'solarized t))
#+END_SRC
Note that because color-theme-solarized mucks with the modeline colors and
fonts, some weird behavior will occur if you change themes after Emacs has
started. A more clever way to do this would be to create a function that sets
the modeline appropriately, and then look to see if there is a hook that can be
used for post-theme switching. Something to look into.

** Font
Anonymous Pro is a good monospace font for programmers and anyone else using a
text editor a significant portion of their time.  I also use a slightly
smaller face size for comments, which I find makes it easier for my eye to
slide over them without sacrificing readability.

Inconsolata is another nice programming font, but it doesn't center asterisks
vertically, which I find a little unsightly.  The official release is at
[[https://fonts.google.com/specimen/Inconsolata][Google fonts]] and official upstream is on [[https://github.com/google/fonts/tree/master/ofl/inconsolata][github]].  
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Anonymous Pro" :height 120)
(set-face-attribute 'font-lock-comment-face nil
                    :family "Anonymous Pro" :height 110)
#+END_SRC
If Anonymous Pro is not installed on the machine, loading the config will likely hang here or when redefining the modeline

** Mode Line Configuration
This is largely based on the mode-line configuration of [[http://amitp.blogspot.com/2011/08/emacs-custom-mode-line.html][Amit Patel]].  I've
made a few changes to make it smaller and render better on a 13" laptop
display.  There are a couple of things that I wish it did differently though:
- Don't include the pathname for buffers like ERC channels
- Do not flag buffers that are not generally saved with the red tag (e.g., REPL, shells)
- Fix the mode-line-read-only-face so that the top and bottom of the box match the rest of the mode-line
- Switching on mode-line-modified-face changes the thickness of the mode line

I may end up giving something like [[https://github.com/Malabarba/smart-mode-line][this]] a try too at some point.

#+BEGIN_SRC emacs-lisp
(setq-default mode-line-format
              '(;; Position, including warning for 80 columns
                (:propertize "%4l:" face mode-line-position-face)
                (:eval (propertize "%3c" 'face
                                   (if (>= (current-column) 80)
                                       'mode-line-80col-face
                                     'mode-line-position-face)))
                
                mode-line-client
                ;; A few empty space
                "    "
                
                ;; Show buffer status
                (:eval (cond ((equal major-mode 'erc-mode)
                              ("    "))
                             ((buffer-modified-p)
                              (propertize " ** "
                                          'face 'mode-line-modified-face))
                             (buffer-read-only
                              (propertize " RO "
                                          'face 'mode-line-read-only-face))
                             (t "    ")))
                
                ;; More empty space
                "    "
                
                ;; Directory and buffer or filename
                (:propertize (:eval (shorten-directory default-directory 20))
                             face mode-line-folder-face)
                (:propertize "%b"
                             face mode-line-filename-face)
                
                ;; Narrowing, if appropriate
                " %n   "
                
                ;; Mode indicator
                (:propertize mode-name
                             face mode-line-mode-face)))

;; Helper function to shorten paths
(defun shorten-directory (dir max-length)
  "Show up to `max-length' characters of a directory name `dir'."
  (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
        (output ""))
    (when (and path (equal "" (car path)))
      (setq path (cdr path)))
    (while (and path (< (length output) (- max-length 4)))
      (setq output (concat (car path) "/" output))
      (setq path (cdr path)))
    (when path
      (setq output (concat ".../" output)))
    output))

(make-face 'mode-line-read-only-face)
(make-face 'mode-line-modified-face)
(make-face 'mode-line-folder-face)
(make-face 'mode-line-filename-face)
(make-face 'mode-line-position-face)
(make-face 'mode-line-mode-face)
(make-face 'mode-line-minor-mode-face)
(make-face 'mode-line-process-face)
(make-face 'mode-line-80col-face)

(set-face-attribute 'mode-line nil
                    :foreground "gray60" :background "gray20"
                    :inverse-video nil
                    :box '(:line-width 1 :color "gray20" :style nil))
(set-face-attribute 'mode-line-inactive nil
                    :foreground "gray80" :background "gray40"
                    :inverse-video nil
                    :box '(:line-width 1 :color "gray40" :style nil))
(set-face-attribute 'mode-line-read-only-face nil
                    :inherit 'mode-line-face
                    :foreground "#4271ae"
                    :box '(:line-width 1 :color "#4271aen"))
(set-face-attribute 'mode-line-modified-face nil
                    :inherit 'mode-line-face
                    :foreground "#ffffff"
                    :background "#c82829"
                    :box '(:line-width 1 :color "#c82829"))
(set-face-attribute 'mode-line-folder-face nil
                    :inherit 'mode-line-face
                    :foreground "gray60")
(set-face-attribute 'mode-line-filename-face nil
                    :inherit 'mode-line-face
                    :foreground "#eab700"
                    :weight 'bold)
;; Make sure that the position font is monospaced, or the rest of the
;; mode-line will jitter all over the place
(set-face-attribute 'mode-line-position-face nil
                    :inherit 'mode-line-face
                    :family "Anonymous Pro" :height 120)
(set-face-attribute 'mode-line-mode-face nil
                    :inherit 'mode-line-face
                    :foreground "gray80")
(set-face-attribute 'mode-line-minor-mode-face nil
                    :inherit 'mode-line-mode-face
                    :foreground "gray40"
                    :height 100)
(set-face-attribute 'mode-line-process-face nil
                    :inherit 'mode-line-face
                    :foreground "#718c00")
(set-face-attribute 'mode-line-80col-face nil
                    :inherit 'mode-line-position-face
                    :foreground "black" :background "#eab700")
#+END_SRC

* Defaults

Much of this was lifted from [[https://github.com/danielmai/.emacs.d][Daniel Mai]].

#+BEGIN_SRC emacs-lisp
;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq version-control t)
(setq kept-old-versions 50)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 encoding
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq-default indent-tabs-mode nil)

;; turn off blinking cursors
(blink-cursor-mode -1)

;; deal with whitespace and such here
(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; don't count two spaces after a period as the end of a sentence.
;; just one space is needed.
(setq sentence-end-double-space nil)

;; delete the region when typing - not default behavior, but it seems ok once
;; you get used to it
(delete-selection-mode t)

;; some intelligent settings for columns and parenthesis
(show-paren-mode t)

;; enable auto-fillmode for all text modes
(add-hook 'text-mode-hook 'my-auto-fill-mode)

;; the default method for this is inane - but modeline might fix it
(setq uniquify-buffer-name-style 'forward)

;; shut the hell up
(setq visible-bell t)

;; also I hate the default quit behavior
(defun ask-before-closing ()
  "Ask whether or not to close, and then close if y was pressed"
  (interactive)
  (if (y-or-n-p (format "Are you sure you want to exit Emacs? "))
      (if (< emacs-major-version 22)
          (save-buffers-kill-terminal)
        (save-buffers-kill-emacs))
    (message "Cancelled exit")))
#+END_SRC

This fixes the aggravating problem of Mac OS not providing Emacs's
shell with the user environment variables (e.g., $PATH)

#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    (use-package exec-path-from-shell
      :if (memq window-system '(mac ns))
      :ensure t
      :init
      (exec-path-from-shell-initialize)))
#+END_SRC

When I use auto-fill-mode, I tend to want it to behave the same, so I'll define
that behavior here and then just add it to mode hooks as needed.

#+BEGIN_SRC emacs-lisp
(defun my-auto-fill-mode ()
  "Define a consistent approach for auto-fill-mode"
  (interactive)
  (turn-on-auto-fill)
  (set-fill-column 80))
#+END_SRC
* Programming
** Python
First, make sure that python-mode gets invoked with a few useful default
settings:
#+BEGIN_SRC emacs-lisp
(use-package python
  :mode (("\\.py$" . python-mode)
         ("\\.cpy$" . python-mode)
         ("\\.vpy$" . python-mode))
  :init
  (setq tab-width 4))
#+END_SRC

[[/usr/lib/python2.7/site-packages/jedi/utils.py][Jedi]] is an awesome autocompletion library for Python.  This assumes that the
jedi libaries are installed somewhere in the Python load-path.
#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :preface
  (declare-function jedi:goto-definition jedi nil)
  (declare-function jedi:related-names jedi nil)
  (declare-function jedi:show-doc jedi nil)
  :bind (("C-." . jedi:goto-definition)
	 ("C-c r" . jedi:related-names)
	 ("C-?" . jedi:show-doc))
  :init (jedi:install-server))

;; calling jedi:setup instead of jedi:ac-setup fully sets up jedi for the
;; current buffer
(add-hook 'python-mode-hook 'jedi:setup)
#+END_SRC

Use flycheck for syntax checking in Python buffers
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC
#  :init (setq flycheck-global-modes '(python-mode)))
Finally, I prefer auto-fill-mode to be enabled by default in python buffers and
to use a sensible number of columns.
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'my-auto-fill-mode)
#+END_SRC

** VHDL
- Auto-fill by default
** Verilog
- Auto-fill by default
** C
- Auto-fill by default
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :ensure t
  :init
  (setq c-default-style "bsd"
        c-basic-offset 4))
#+END_SRC

* Productivity
** Ido
Interactively do things with buffers and files.  Also enable
ido-enable-flex-matching.
#+BEGIN_SRC emacs-lisp
(use-package ido
  :init
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)
  (use-package ido-vertical-mode
    :ensure t
    :defer t
    :init (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
  (use-package ido-hacks
    :ensure t
    :defer t))
#+END_SRC

** Ibuffer
Use ibuffer instead of the default list-buffers.
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+END_SRC

** Org-Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :init
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t)
  (add-hook 'org-mode-hook 'my-auto-fill-mode))
#+END_SRC

* Global Keybinds

Having rewritten the function used for quitting, we remap the keybind for
quitting Emacs

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-c") 'ask-before-closing)
#+END_SRC

** Org-Mode
Also, here are some global key bindings that integrate really well with
org-mode

#+BEGIN_SRC emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+END_SRC

** Window
Convenient keybindings to resize windows.

#+BEGIN_SRC emacs-lisp
(bind-key "s-C-<left>"  'shrink-window-horizontally)
(bind-key "s-C-<right>" 'enlarge-window-horizontally)
(bind-key "s-C-<down>"  'shrink-window)
(bind-key "s-C-<up>"    'enlarge-window)
#+END_SRC

This is a nice clever way to split and switch to the other window at the same
time.  Not sure why this isn't default behavior.

#+BEGIN_SRC emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+END_SRC
* Other
#+BEGIN_SRC emacs-lisp
(use-package server
  :config
  (server-start))
#+END_SRC
* Things to Include
A few things that still need to be done:
** TODO Determine a C indenting style for default and tab stops
** TODO Enable pylint to check Python buffers
** TODO Configure VHDL mode
** TODO Configure Verilog mode
** TODO Configure verilator to work with flycheck for verilog syntax checking
** TODO Yasnippets and Verilog / VHDL / Systemverilog
** TODO Configure support for editing of emails using Mutt
** TODO Code folding in Python files
** TODO Configure ERC

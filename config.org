#+TITLE: Emacs Configuration
#+AUTHOR: George Castillo

Every so often, I try to take some time to organize my Emacs
configuration and been more or less met with mixed results.  I
recently ran across the idea of using org-mode to organize virtually
all of it, and I thought that was a fantastic idea.  I use org-mode
for managing nearly everything else as it is, so it makes total sense
to use it for keeping my Emacs configuration from getting out of
control.

* Customize Settings

Set up a file for custom settings instead of saving customize settings in
[[file:init.el][init.el]].  This seems to happen inadvertantly, so putting it somewhere else is a
good idea.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (if (file-exists-p custom-file)
      (load custom-file))
#+END_SRC

* Theme
** Solarized Theme
I have been using the [[http://ethanschoonover.com/solarized][Solarized theme]] for as long as I can remember.  It has
both light and dark variants and eye fatigue has never been a problem
for me.

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :if (window-system)
    :ensure t
    :init
    (load-theme 'solarized-dark t))
#+END_SRC

** Convenient Theme Functions

#+BEGIN_SRC emacs-lisp
  (defun switch-theme (theme)
    "Disables any currently active themes and loads THEME."
    ;; This interactive call is taken from `load-theme'
    (interactive
     (list
      (intern (completing-read "Load custom theme: "
                               (mapc 'symbol-name
                                     (custom-available-themes))))))
    (let ((enabled-themes custom-enabled-themes))
      (mapc #'disable-theme custom-enabled-themes)
      (load-theme theme t)))
#+END_SRC
* Font

Inconsolata is a good monospace font for programmers and anyone else using a
text editor a significant portion of their time.  The official release is at
[[https://fonts.google.com/specimen/Inconsolata][Google fonts]] and official upstream is on [[https://github.com/google/fonts/tree/master/ofl/inconsolata][github]].  I also use a slightly
smaller face size for comments, which I find makes it easier for my eye to
slide over them without sacrificing readability.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "Inconsolata" :height 120)
  (set-face-attribute 'font-lock-comment-face nil
                      :family "Inconsolata" :height 110)
#+END_SRC

* Defaults

Much of this was lifted from [[https://github.com/danielmai/.emacs.d][Daniel Mai]].

#+BEGIN_SRC emacs-lisp
  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq version-control t)
  (setq kept-old-versions 50)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 encoding
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq-default indent-tabs-mode nil)

  ;; Turn off blinking cursors
  (blink-cursor-mode -1)

  ;; Deal with whitespace and such here
  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; Delete the region when typing - not sure if I like this
  (delete-selection-mode t)

  ;; Some intelligent settings for columsn and parenthesis
  (show-paren-mode t)

  ;; Visual line mode should be the default, and we will enable auto-fill mode on
  ;; a mode by mode basis
  (global-visual-line-mode)
  (diminish 'visual-line-mode)

  ;; The default method for this is inane - but modeline might fix it
  (setq uniquify-buffer-name-style 'forward)

  ;; Shut the hell up
  (setq visible-bell t)

  ;; I hate the default quit behavior
  (defun ask-before-closing ()
    "Ask whether or not to close, and then close if y was pressed"
    (interactive)
    (if (y-or-n-p (format "Are you sure you want to exit Emacs? "))
        (if (< emacs-major-version 22)
            (save-buffers-kill-terminal)
          (save-buffers-kill-emacs))
      (message "Cancelled exit")))

#+END_SRC

This fixes the aggravating problem of Mac OS not providing Emacs's
shell with the usual one

#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    (use-package exec-path-from-shell
      :if (memq window-system '(mac ns))
      :ensure t
      :init
      (exec-path-from-shell-initialize)))
#+END_SRC

* Mode Line Configuration

This is largely based on the mode-line configuration of [[http://amitp.blogspot.com/2011/08/emacs-custom-mode-line.html][Amit Patel]].  I've
made a few changes to make it smaller and render better on a 13" laptop
display.  There are a couple of things that I wish it did differently though:

** TODO Don't include the pathname for buffers like ERC channels
** TODO Do not flag buffers that are not generally saved with the red tag (e.g., REPL, shells)
** TODO Fix the mode-line-read-only-face so that the top and bottom of the box match the rest of the mode-line
** TODO Switching on mode-line-modified-face changes the thickness of the mode line

#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format
                '(;; Position, including warning for 80 columns
                  (:propertize "%4l:" face mode-line-position-face)
                  (:eval (propertize "%3c" 'face
                                     (if (>= (current-column) 80)
                                         'mode-line-80col-face
                                       'mode-line-position-face)))
  
                  mode-line-client
                  ;; A few empty space
                  "    "
  
                  ;; Show buffer status
                  (:eval (cond ((equal major-mode 'erc-mode)
                                ("    "))
                               ((buffer-modified-p)
                                (propertize " ** "
                                            'face 'mode-line-modified-face))
                               (buffer-read-only
                                (propertize " RO "
                                            'face 'mode-line-read-only-face))
                               (t "    ")))
  
                  ;; More empty space
                  "    "
  
                  ;; Directory and buffer or filename
                  (:propertize (:eval (shorten-directory default-directory 20))
                               face mode-line-folder-face)
                  (:propertize "%b"
                               face mode-line-filename-face)
  
                  ;; Narrowing, if appropriate
                  " %n   "
  
                  ;; Mode indicator
                  (:propertize mode-name
                               face mode-line-mode-face)))
  
  ;; Helper function to shorten paths
  (defun shorten-directory (dir max-length)
    "Show up to `max-length' characters of a directory name `dir'."
    (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
          (output ""))
      (when (and path (equal "" (car path)))
        (setq path (cdr path)))
      (while (and path (< (length output) (- max-length 4)))
        (setq output (concat (car path) "/" output))
        (setq path (cdr path)))
      (when path
        (setq output (concat ".../" output)))
      output))
  
  (make-face 'mode-line-read-only-face)
  (make-face 'mode-line-modified-face)
  (make-face 'mode-line-folder-face)
  (make-face 'mode-line-filename-face)
  (make-face 'mode-line-position-face)
  (make-face 'mode-line-mode-face)
  (make-face 'mode-line-minor-mode-face)
  (make-face 'mode-line-process-face)
  (make-face 'mode-line-80col-face)
     
  (set-face-attribute 'mode-line nil
                      :foreground "gray60" :background "gray20"
                      :inverse-video nil
                      :box '(:line-width 1 :color "gray20" :style nil))
  (set-face-attribute 'mode-line-inactive nil
                      :foreground "gray80" :background "gray40"
                      :inverse-video nil
                      :box '(:line-width 1 :color "gray40" :style nil))
  (set-face-attribute 'mode-line-read-only-face nil
                      :inherit 'mode-line-face
                      :foreground "#4271ae"
                      :box '(:line-width 1 :color "#4271aen"))
  (set-face-attribute 'mode-line-modified-face nil
                      :inherit 'mode-line-face
                      :foreground "#ffffff"
                      :background "#c82829"
                      :box '(:line-width 1 :color "#c82829"))
  (set-face-attribute 'mode-line-folder-face nil
                      :inherit 'mode-line-face
                      :foreground "gray60")
  (set-face-attribute 'mode-line-filename-face nil
                      :inherit 'mode-line-face
                      :foreground "#eab700"
                      :weight 'bold)
  ;; Make sure that the position font is monospaced, or the rest of the
  ;; mode-line will jitter all over the place
  (set-face-attribute 'mode-line-position-face nil
                      :inherit 'mode-line-face
                      :family "Inconsolata" :height 120)
  (set-face-attribute 'mode-line-mode-face nil
                      :inherit 'mode-line-face
                      :foreground "gray80")
  (set-face-attribute 'mode-line-minor-mode-face nil
                      :inherit 'mode-line-mode-face
                      :foreground "gray40"
                      :height 100)
  (set-face-attribute 'mode-line-process-face nil
                      :inherit 'mode-line-face
                      :foreground "#718c00")
  (set-face-attribute 'mode-line-80col-face nil
                      :inherit 'mode-line-position-face
                      :foreground "black" :background "#eab700")
#+END_SRC
* Global Keybinds

Having rewritten the function used for quitting, we remap the keybind for
quitting Emacs

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-c") 'ask-before-closing)
#+END_SRC

** Org-Mode

Also, here are some global key bindings that integrate really well with
org-mode

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c l" 'org-store-link)
  (bind-key "C-c c" 'org-capture)
  (bind-key "C-c a" 'org-agenda)
#+END_SRC

** Window

Convenient keybindings to resize windows.

#+BEGIN_SRC emacs-lisp
  (bind-key "s-C-<left>"  'shrink-window-horizontally)
  (bind-key "s-C-<right>" 'enlarge-window-horizontally)
  (bind-key "s-C-<down>"  'shrink-window)
  (bind-key "s-C-<up>"    'enlarge-window)
#+END_SRC

This is a nice clever way to split and switch to the other window at the same
time.  Not sure why this isn't default behavior.

#+BEGIN_SRC emacs-lisp
  (defun vsplit-other-window ()
    "Splits the window vertically and switches to that window."
    (interactive)
    (split-window-vertically)
    (other-window 1 nil))
  (defun hsplit-other-window ()
    "Splits the window horizontally and switches to that window."
    (interactive)
    (split-window-horizontally)
    (other-window 1 nil))

  (bind-key "C-x 2" 'vsplit-other-window)
  (bind-key "C-x 3" 'hsplit-other-window)
#+END_SRC

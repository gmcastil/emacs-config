#+TITLE: Emacs Configuration
#+AUTHOR: George Castillo

Every so often, I try to take some time to organize my Emacs
configuration and am more or less met with mixed results.  I
recently ran across the idea of using org-mode to organize virtually
all of it, and I thought that was a fantastic idea.  I use org-mode
for managing nearly everything else as it is, so it makes total sense
to use it for keeping my Emacs configuration from getting out of
control.

* Customize Settings

Set up a file for custom settings instead of saving customize settings in
[[file:init.el][init.el]].  This seems to happen inadvertantly on occasion, so putting it
somewhere else is probably a good idea.

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(if (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* Appearance

Turn off a lot of the default stuff that just ends up occupying a lot of screen
real estate.
#+BEGIN_SRC emacs-lisp
(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (fringe-mode -1))

;; menu-bar-mode should remain off unless we happen to be on Mac OS since the
;; blank menu at the top of the screen it creates looks really weird
(if (and window-system (string-equal system-type "darwin"))
 (menu-bar-mode nil))

(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)

;; elisp scratch buffers should be empty
(setq initial-scratch-message "")
#+END_SRC

** Theme
I have been using the [[http://ethanschoonover.com/solarized][Solarized themes]] for as long as I can remember. It has
both light and dark variants and eye fatigue has never been a problem for me.
#+BEGIN_SRC emacs-lisp
;; for some reason, if color-theme is not explicitly installed first, this breaks.
(use-package color-theme :ensure t)

;; https://github.com/sellout/emacs-color-theme-solarized/pull/187
(use-package color-theme-solarized
  :ensure t
  :init
  (customize-set-variable 'frame-background-mode 'dark)
  (load-theme 'solarized t))
#+END_SRC
Note that because color-theme-solarized mucks with the modeline colors and
fonts, some weird behavior will occur if you change themes after Emacs has
started. A more clever way to do this would be to create a function that sets
the modeline appropriately, and then look to see if there is a hook that can be
used for post-theme switching. Something to look into.

** Font
Anonymous Pro is a good monospace font for programmers and anyone else using a
text editor a significant portion of their time.  I also use a slightly
smaller face size for comments, which I find makes it easier for my eye to
slide over them without sacrificing readability.

Inconsolata is another nice programming font, but it doesn't center asterisks
vertically, which I find a little unsightly.  The official release is at
[[https://fonts.google.com/specimen/Inconsolata][Google fonts]] and official upstream is on [[https://github.com/google/fonts/tree/master/ofl/inconsolata][github]].
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Anonymous Pro" :height 120)
(set-face-attribute 'font-lock-comment-face nil
                    :family "Anonymous Pro" :height 110)
#+END_SRC
If Anonymous Pro is not installed on the machine, loading the config will likely hang here or when redefining the modeline

** Mode Line Configuration
This is largely based on the mode-line configuration of [[http://amitp.blogspot.com/2011/08/emacs-custom-mode-line.html][Amit Patel]].  I've
made a few changes to make it smaller and render better on a 13" laptop
display.  There are a couple of things that I wish it did differently though:
- Don't include the pathname for buffers like ERC channels
- Do not flag buffers that are not generally saved with the red tag (e.g., REPL, shells)
- Fix the mode-line-read-only-face so that the top and bottom of the box match the rest of the mode-line
- Switching on mode-line-modified-face changes the thickness of the mode line

I may end up giving something like [[https://github.com/Malabarba/smart-mode-line][this]] a try too at some point.

#+BEGIN_SRC emacs-lisp
(setq-default mode-line-format
              '(;; Position, including warning for 80 columns
                (:propertize "%5l:" face mode-line-position-face)
                (:eval (propertize "%3c" 'face
                                   (if (>= (current-column) 80)
                                       'mode-line-80col-face
                                     'mode-line-position-face)))

                mode-line-client
                ;; A few empty space
                "    "

                ;; Show buffer status
                (:eval (cond ((equal major-mode 'erc-mode)
                              ("    "))
                             ((buffer-modified-p)
                              (propertize " ** "
                                          'face 'mode-line-modified-face))
                             (buffer-read-only
                              (propertize " RO "
                                          'face 'mode-line-read-only-face))
                             (t "    ")))

                ;; More empty space
                "    "

                ;; Directory and buffer or filename
                (:propertize (:eval (shorten-directory default-directory 20))
                             face mode-line-folder-face)
                (:propertize "%b"
                             face mode-line-filename-face)

                ;; Narrowing, if appropriate
                " %n   "

                ;; Mode indicator
                (:propertize mode-name
                             face mode-line-mode-face)))

;; Helper function to shorten paths
(defun shorten-directory (dir max-length)
  "Show up to `max-length' characters of a directory name `dir'."
  (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
        (output ""))
    (when (and path (equal "" (car path)))
      (setq path (cdr path)))
    (while (and path (< (length output) (- max-length 4)))
      (setq output (concat (car path) "/" output))
      (setq path (cdr path)))
    (when path
      (setq output (concat ".../" output)))
    output))

(make-face 'mode-line-read-only-face)
(make-face 'mode-line-modified-face)
(make-face 'mode-line-folder-face)
(make-face 'mode-line-filename-face)
(make-face 'mode-line-position-face)
(make-face 'mode-line-mode-face)
(make-face 'mode-line-minor-mode-face)
(make-face 'mode-line-process-face)
(make-face 'mode-line-80col-face)

(set-face-attribute 'mode-line nil
                    :foreground "gray60" :background "gray20"
                    :inverse-video nil
                    :box '(:line-width 1 :color "gray20" :style nil))
(set-face-attribute 'mode-line-inactive nil
                    :foreground "gray80" :background "gray40"
                    :inverse-video nil
                    :box '(:line-width 1 :color "gray40" :style nil))
(set-face-attribute 'mode-line-read-only-face nil
                    :inherit 'mode-line-face
                    :foreground "#4271ae"
                    :box '(:line-width 1 :color "#4271aen"))
(set-face-attribute 'mode-line-modified-face nil
                    :inherit 'mode-line-face
                    :foreground "#ffffff"
                    :background "#c82829"
                    :box '(:line-width 1 :color "#c82829"))
(set-face-attribute 'mode-line-folder-face nil
                    :inherit 'mode-line-face
                    :foreground "gray60")
(set-face-attribute 'mode-line-filename-face nil
                    :inherit 'mode-line-face
                    :foreground "#eab700"
                    :weight 'bold)
;; Make sure that the position font is monospaced, or the rest of the
;; mode-line will jitter all over the place
(set-face-attribute 'mode-line-position-face nil
                    :inherit 'mode-line-face
                    :family "Anonymous Pro" :height 120)
(set-face-attribute 'mode-line-mode-face nil
                    :inherit 'mode-line-face
                    :foreground "gray80")
(set-face-attribute 'mode-line-minor-mode-face nil
                    :inherit 'mode-line-mode-face
                    :foreground "gray40"
                    :height 100)
(set-face-attribute 'mode-line-process-face nil
                    :inherit 'mode-line-face
                    :foreground "#718c00")
(set-face-attribute 'mode-line-80col-face nil
                    :inherit 'mode-line-position-face
                    :foreground "black" :background "#eab700")
#+END_SRC

* Defaults

Much of this was lifted from [[https://github.com/danielmai/.emacs.d][Daniel Mai]].

#+BEGIN_SRC emacs-lisp
;; Keep all backup and auto-save files in one directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq version-control t)
(setq kept-old-versions 50)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; UTF-8 encoding
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq-default indent-tabs-mode nil)

;; turn off blinking cursors
(blink-cursor-mode -1)

;; deal with whitespace and such here
(setq-default indent-tabs-mode nil)
(setq-default indicate-empty-lines t)

;; don't count two spaces after a period as the end of a sentence.
;; just one space is needed.
(setq sentence-end-double-space nil)

;; some intelligent settings for columns and parenthesis
(show-paren-mode t)

;; enable auto-fill-mode for all text modes and set the fill width to be the
;; same every time
(add-hook 'text-mode-hook '(lambda ()
                            (auto-fill-mode)
                            (setq-default fill-column 80)))

;; the default method for this is inane - but modeline might fix it
(setq uniquify-buffer-name-style 'forward)

;; shut the hell up
(setq visible-bell t)

;; also I hate the default quit behavior
(defun ask-before-closing ()
  "Ask whether or not to close, and then close if y was pressed"
  (interactive)
  (if (y-or-n-p (format "Are you sure you want to exit Emacs? "))
      (if (< emacs-major-version 22)
          (save-buffers-kill-terminal)
        (save-buffers-kill-emacs))
    (message "Cancelled exit")))
#+END_SRC

This fixes an aggravating problem of Mac OS not providing Emacs's
shell with the user environment variables (e.g., $PATH)
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    (use-package exec-path-from-shell
      :if (memq window-system '(mac ns))
      :ensure t
      :init
      (exec-path-from-shell-initialize)))
#+END_SRC

Also, delete trailing whitespace after saving.  Note that in some contexts this
can really mess with files that are under revision control.  If you are editing
a file that has a lot of whitespace, consider fixing the whitespace separately
to keep maintainers from getting angry with you.
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Programming

Emacs 24.1 introduced a new major mode that all other programming major modes
inherit from, so enable some common behavior like code folding in programming
modes.
#+BEGIN_SRC emacs-lisp
(use-package outline
  :ensure t)
(use-package outline-magic
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'outline-minor-mode)
  (define-key outline-minor-mode-map (kbd "<C-tab>") 'outline-cycle))
#+END_SRC

** Python
First, make sure that python-mode gets invoked with a few useful default
settings:
#+BEGIN_SRC emacs-lisp
(use-package python
  :mode (("\\.py$" . python-mode)
         ("\\.cpy$" . python-mode)
         ("\\.vpy$" . python-mode))
  :init
  (setq tab-width 4))
#+END_SRC

[[/usr/lib/python2.7/site-packages/jedi/utils.py][Jedi]] is an awesome autocompletion library for Python.  This assumes that the
jedi libaries are installed somewhere in the Python load-path.
#+BEGIN_SRC emacs-lisp
(use-package jedi
    :ensure t
    :preface
    (declare-function jedi:goto-definition jedi nil)
    (declare-function jedi:related-names jedi nil)
    (declare-function jedi:show-doc jedi nil)
    :bind (("C-." . jedi:goto-definition)
           ("C-c r" . jedi:related-names)
           ("C-?" . jedi:show-doc))
    :init (jedi:install-server))

  ;; calling jedi:setup instead of jedi:ac-setup fully sets up jedi for the
  ;; current buffer
  (add-hook 'python-mode-hook 'jedi:setup)
#+END_SRC

And also use pylint to improve code quality and conformance to coding standards.
This assumes the pylint package has been installed on the system and is in the
Python load-path.
#+BEGIN_SRC emacs-lisp
(use-package pylint
  :ensure t)
#+END_SRC

** VHDL
- Auto-fill by default
** Verilog
- Auto-fill by default
** C
Set the indention style when in C mode
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :ensure t
  :init
  (setq c-default-style "k&r"))
#+END_SRC

** Flycheck
Flycheck is great for performing syntax checking, but it is not very flexibile
when it comes to determining when and when not to invoke its phenomenal cosmic
powers.  Usually, if it cannot find a compatible syntax checker, it just passes
and lets you carry on without much more than an error message (I think).
However, it sort of gets in the way of some default org-mode keybindings, so
we'll disable it for that particular major-mode.  I also do not want it running
in LaTeX-mode either

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode)
  (setq flycheck-global-modes '(not org-mode)))
#+END_SRC

* Productivity
** Ido
Interactively do things with buffers and files.  Also enable
ido-enable-flex-matching.
#+BEGIN_SRC emacs-lisp
(use-package ido
  :init
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode t)
  (add-to-list 'ido-ignore-files "\\.pyc")
  (use-package ido-vertical-mode
    :ensure t
    :defer t
    :init (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only))
  (use-package ido-hacks
    :ensure t
    :defer t))
#+END_SRC

** Ibuffer
Use ibuffer instead of the default list-buffers.
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+END_SRC

While we're at it, kill unmodified buffers without asking for confirmation.
#+BEGIN_SRC emacs-lisp
(defun volatile-kill-buffer ()
   "Kill current buffer unconditionally."
   (interactive)
   (let ((buffer-modified-p nil))
     (kill-buffer (current-buffer))))
#+END_SRC
** Org-Mode
I use org-mode to organize just about everything I do - in fact, the more I use
Emacs, the more I find myself wanting to integrate things into it.  I obviously
use org-mode to configure Emacs as well.
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :init
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t)
  (setq org-log-done 'time)
  ;; set up my personal workflow items
  (setq org-todo-keywords
        '((sequence "TODO" "STARTED" "WAITING" "|" "ABANDONED" "DONE")))
  ;; track everything in this directory for the agenda
  (setq org-agenda-files '("~/org")))
#+END_SRC
** ERC
I use IRC quite a bit, pretty much just on Freenode. Unfortunately, the main
network at the office blocks IRC traffic, so this only works from a network
connection that has access to that server. One of my side projects is
configuring this to use an IRC network bouncer, but for now, this will have to
do.
#+BEGIN_SRC emacs-lisp
(use-package erc-hl-nicks
  :ensure t)
(use-package erc
  :ensure t
  :init
  (erc-autojoin-mode t)
  ;; buttonize links in an intelligent way
  (setq erc-button-url-regexp
	"\\([-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]+\\.\\)+[-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]*[-a-zA-Z0-9\\/]")
  ;; don't show any of these notifications
  (setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK"))
  (setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
				  "324" "329" "332" "333" "343" "477"))
  (setq erc-autojoin-channels-alist
      '((".*\\.freenode.net" "#emacs" "#physics" "#python" "#math")))

  ;; This sets the ERC prompt to include the channel name, which is an awesome thing
  ;; Code snippet from http://www.emacswiki.org/emacs/ErcConfiguration
  ;; Bug alert - (erc-default-target) returns nil when the prompt is first displayed.
  ;; Also, the code is ugly and needs fixing
  (setq erc-prompt (lambda ()
		     (if (and (boundp 'erc-default-recipients) (erc-default-target))
			 (erc-propertize (concat (erc-default-target) ">") 'read-only t
					 'rear-nonsticky t 'front-nonsticky t)
		       (erc-propertize (concat "ERC>") 'read-only t 'rear-nonsticky t
				       'front-nonsticky t)))))
#+END_SRC
Now we define a function to automatically login to the IRC server and join the
usual hangouts.  Obviously change 'username' and 'password' to whatever yours
are.  I should like to encrypt those instead of storing them in plain text.
#+BEGIN_SRC emacs-lisp
(defun join-erc ()
  "Fire up ERC!"
  (interactive)
  ;; if ERC buffer exists already, then switch to the last active ERC buffer
  (if (get-buffer "irc.freenode.net:6667")
      (erc-track-switch-buffer 1)
    (when (y-or-n-p "Start ERC? ")
      (erc :server "irc.freenode.net" :port 6667
	   :nick "username" :password "password"))))
#+END_SRC
** Mutt
I use [[http://www.mutt.org/][Mutt]] as my email client, but I still like to use Emacs to edit my
messages.
#+BEGIN_SRC emacs-lisp
;; very nice font-locking package for editing muttrc files
(use-package muttrc-mode
  :ensure t)
;; depending upon how you have mutt configured, this may or may not be the
;; right string to use for temporary mail messages
(add-to-list 'auto-mode-alist '("/tmp/mutt" . mail-mode))
;; depending upon where your config files are, this may need to be modified
(add-to-list 'auto-mode-alist '("muttrc" . muttrc-mode))
#+END_SRC
* Global Keybinds

Having rewritten the function used for quitting, we remap the keybind for
quitting Emacs.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-c") 'ask-before-closing)
#+END_SRC

Also, remap the keybind for killing buffers so that we do not have to get
confirmation for killing unmodified buffers.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'volatile-kill-buffer)
#+END_SRC
** ERC
Join ERC from anywhere.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c e") 'join-erc)
#+END_SRC
** Org-Mode
Also, here are some global key bindings that are usually assumed to be present
with org-mode
#+BEGIN_SRC emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+END_SRC

For managing timestamps, also use these
#+BEGIN_SRC emacs-lisp
(bind-key "C-c ." 'org-time-stamp)
(bind-key "C-c !" 'org-time-stamp-inactive)
#+END_SRC

** Window
Convenient keybindings to resize windows.

#+BEGIN_SRC emacs-lisp
(bind-key "s-C-<left>"  'shrink-window-horizontally)
(bind-key "s-C-<right>" 'enlarge-window-horizontally)
(bind-key "s-C-<down>"  'shrink-window)
(bind-key "s-C-<up>"    'enlarge-window)
#+END_SRC

This is a nice and clever way to split and switch to the other window at the
same time. Not sure why this isn't default behavior.
#+BEGIN_SRC emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))

(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+END_SRC

* Other

Start up the Emacs server so that other applications, notably Mutt can find it
when necessary.
#+BEGIN_SRC emacs-lisp
(use-package server
  :config
  (server-start))
#+END_SRC

Often I will make some edits to a region or paragraph that has been filled
(usually to 80 columns) and it will to be refilled.  I have been tediously doing
it by hand for ages now and don't know why I waited this long to fix it.
#+BEGIN_SRC emacs-lisp
(defun unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single logical line"
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))
#+END_SRC

* Things to Include

A few things that still need to be done:
** TODO Configure VHDL mode
** TODO Configure Verilog mode
** TODO Configure verilator to work with flycheck for verilog syntax checking
** TODO Yasnippets and Verilog / VHDL / Systemverilog
** TODO Add encryption to ERC passwords
** TODO Enable flyspell in all programming comments using something like this
Also, can enable spell-checking in code comments
** TODO Try to configure pylint's output
https://pylint.readthedocs.io/en/latest/user_guide/output.html

I think this is like pylint --msg-template or soemthing
# #+BEGIN_SRC emacs-lisp
# (add-hook 'prog-mode-hook 'flyspell-prog-mode)
# #+END_SRC
** TODO Make mail-mode save automatically fill the region and not ask to save
